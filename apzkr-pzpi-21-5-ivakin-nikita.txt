Міністерство освіти і науки України
Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук

Кафедра програмної інженерії

КУРСОВА РОБОТА
ПОЯСНЮВАЛЬНА ЗАПИСКА
з навчальної дисципліни «Архітектура програмного забезпечення»
Тема роботи: «Програмна система для контролю логістичного забезпечення війська»

Студент гр. ПЗПІ-21-5		 __________________ Івакін Н. М.
(підпис)
Керівник роботи 			___________________ ст.викл. Сокорчук І.П.
(підпис)
Роботу захищено «__»_________2024 р.
з оцінкою _________________________

Комісія: 				___________________ доц. Лещинський В.О.
(підпис)
___________________ доц. Лещинська І.О.
(підпис)
___________________ ст.викл. Сокорчук І.П.
(підпис)

Харків, 2024 р.
Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук. Кафедра програмної інженерії
Спеціальність 121 – Інженерія програмного забезпечення
Курс                     3                     Семестр 	                  6
Навчальна дисципліна Архітектура програмного забезпечення

ЗАВДАННЯ
НА ЛАБОРАТОРНІ РОБОТИ СТУДЕНТА

                                                        Івакін Нікіта Максимов
1. Тема роботи: «Програмна система для контролю логістичного забезпечення війська»
2. Термін узгодження завдання роботи «1» квітня  2024 р.
3. Термін здачі студентом закінченої роботи «1» червня 2024 р.
4. Вихідні дані до проєкту (роботи): Програмна система буде надавати можливість об’єднання всіх даних та процесів у єдиній системі, а саме планування логістичних операцій, слідкування за боєздатністю підрозділів та станом  їх особового складу, а також стеженням за кількістю ресурсів у підрозділах та постачанням цих ресурсів. включаючи замовлення, запаси, фінанси, персонал та звітність. Використовувати СУБД PostgreSQL, мову програмування Java для написання серверної частини, мову TypeScript  та бібліотеку  Angular для написання веб-додатку (середовище Visual Studio Code), мову Kotlin (середовище Android Studio) для написання мобільного додатку на операційну систему Android,  Python для програмування Smart Device.
5. Зміст звітів до лабораторних робіт (перелік питань, що належить розробити): аркуш завдання, документ Vision & Scope, серверна (back-end) частина програмної системи, клієнтська (front-end) частина програмної системи, мобільний застосунок для пристроїв під керуванням операційної системи Android, програмне забезпечення для IoT, фрагменти коду, контрольні суми до архівів, графічні матеріали.
6. Перелік графічного матеріалу (з точним зазначенням обов’язкових креслень):  UML діаграму розгортання, UML діаграму прецедентів, ER-модель даних, UML діаграма станів, UML діаграма діяльності, UML діаграма пакетів, UML діаграма компонент.



КАЛЕНДАРНИЙ ПЛАН


№	Назва лабораторної роботи	Термін виконання етапів роботи	Примітка
1	Розробка документу Vision & Scope	06.04.2024	-
2	Розробка back-end частини проєкту	20.04.2024	-
3	Розробка front-end частини проєкту	04.05.2024	-
4	Розробка мобільного програмного застосунку	18.05.2024	-
5	Розробка програмного забезпечення для IoT	01.06.2024	-

Дата видачі завдання «1»____квітня_____2024 р.
Викладач лабораторних робіт _____________ ст. викл. Сокорчук І. П.
                                                                    (підпис)

Завдання прийняв до виконання
ст.гр. ПЗПІ-21-5                                                                               Івакін Н. М.
                                                                                          (підпис)

РЕФЕРАТ


Пояснювальна записка до курсової роботи: с., рис.,  табл., додатків, джерел.
КОРИСТУВАЧ, КОМАНДИР, БОЙОВА ГРУПА, ПРОГРАМНА СИСТЕМА ДЛЯ КОНТРОЛЮ ЛОГІСТИЧНОГО ЗАБЕЗПЕЧЕННЯ, РЕСУРСИ, ЛОГІСТИЧНЕ ЗАБЕЗПЕЧЕННЯ, БАЗА ДАНИХ, СКАНУЮЧИЙ ДЕВАЙС, SPRING BOOT, ANGULAR.
Об'єктом дослідження є логістика ЗСУ, а саме контроль логістичного забезпечення  війська, яке є дуже актуальним у час застосування програмних систем для покращення роботи у різних сферах, через повномасштабне вторгнення сусідньої країни на територію України та вступу в дію умови про оборонну реформу, яка спрямована на підвищення оборонних спроможностей та сумісності з силами НАТО і ЄС.
Метою курсового проєкту є розробка програмної системи для контролю логістичного забезпечення війська, яка складається з побудови архітектур серверної частини, веб-клієнту, IoT та мобільного застосунку, та їх  для покращення контролю логістичного забезпечення, звітності про ресурси та можливості електронного зберігання їх розподілення і поставок між бойовими групами.
Розробка програмної системи відбувається з використанням наступних технологій: Spring Boot з використанням мови програмування Java для серверної частини та СУБД «PostgreSQL», Angular разом з мовою TypeScript для веб-клієнту, мова програмування Java разом з бібліотеками Jackson та JSON.org, і використанням пакету «java.net».
У ході виконання роботи було розроблено програмну систему для контролю логістичного забезпечення війська, яка надає можливість точного обліку витрачених і отриманих ресурсів, що підвищує прозорість і зменшує ризики розкрадання, забезпечує швидкий і надійний обмін даними між бойовими підрозділами, що підвищує ефективність їхньої взаємодії. Створена програмна система складається з серверного застосунку, веб-клієнту, мобільного застосунку та IoТ пристрою, є доволі ефективною і має перспективи у інтеграції з додатковими логістичними системами.


ЗМІСТ


ВСТУП	9
1 БІЗНЕСН ВИМОГИ	11
1.1	Передумови	11
1.2	Бізнес можливості	12
1.3	Бізнес-цілі та критерії успіху	15
1.4	Потреби клієнтів або ринку	16
1.5	Бізнес ризики	18
2 КОНЦЕПЦІЯ РІШЕННЯ	20
2.1 Окреслення концепції	20
2.2 Головна функціональність	21
2.3 Припущення та залежності	23
3 РАМКИ ТА ОБМЕЖЕННЯ  ПРОЄКТУ	24
3.1 Рамки первинного випуску	24
3.2 Рамки наступних випусків	26
3.3 Обмеження та винятки	27
4 БІЗНЕС-КОНТЕКСТ	28
4.1 Профілі зацікавлених сторін	28
4.2 Пріоритети проєкту	29
4.3 Робоче середовище	31
5 РОЗРОБКА СЕРВЕРНОЇ ЧАСТИНИ	34
5.1 Архітектура системи	34
5.2 Структура бази даних	35
5.3 Бізнес логіка	37
5.4 Специфікація запитів	39
6 РОЗРОБКА РОЗУМНОГО ПРИСТРОЮ	45
6.1 Архітектура система та бізнес логіка	45
6.2 Специфікація запитів	47
7 РОЗРОБКА КЛІЄНТСЬКОЇ СИСТЕМИ	48
7.1 Архітектура системи	48
7.2 Бізнес логіка	49
7.3 Специфікація запитів	52
ВИСНОВКИ	57
ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ	59
ДОДАТОК А Діаграми для серверної частини	60
Діаграма пакетів	60
Діаграма розгортання	61
ER-діаграма	62
Діаграма прецедентів	63
ДОДАТОК Б Діаграми для розумного пристрою	64
Діаграма прецедентів	64
Діаграма пакетів	65
Діаграма діяльності	66
ДОДАТОК В Діаграми для веб-клієнту	67
Діаграма прецедентів	67
Діаграма пакетів	68
Діаграма діяльності	69
Діаграма компонентів	70


ВСТУП


У сучасному світі активно використовуються програмні системи у різних аспектах життя задля надання, автоматизації, зменшення часу на виконання певної роботи, підвищення її точності та ефективності. Так само і для логістичних операцій існують та розробляються такі програмні системи, бо це значно полегшує більшість процесів, та зменшує кількість помилок, які могли бути допущенні при їх виконанні. З урахуванням того, що зараз Україна перебуває у важкому становищі повномасштабної війни, і виникли певні недоліки у контролі логістичного забезпечення війська, а саме низький рівень автоматизації процесів, що призводить до великої кількості ручної роботи та помилок, недостатня прозорість і контроль за витратами та розподілом ресурсів, що збільшує ризики розкрадання та неправомірного використання, а також через умову про оборонну реформу, яка спрямована на підвищення оборонних спроможностей та сумісності з силами НАТО і ЄС, виникає нагальна потреба у створенні інноваційної системи логістичного забезпечення. [3]
Створення програмної системи для контролю логістичного забезпечення війська та її впровадження є дуже актуальним. Оскільки Україні необхідні нові програмні системи, технічне обладнання, смарт пристрої та винаходи для покращення обороноздатності та військової потужності, для боротьби з ворогом. Використання такої системи надає покращений контроль логістичного забезпечення, звітності про ресурси та можливості електронного зберігання їх розподілення і поставок між бойовими групами, а також забезпечує швидкий та надійний обмін даними між бойовими підрозділами, що підвищує їх ефективність. І це допоможе воєнному керівництву Збройних сил України забезпечити більш ефективний контроль логістичними операціями та вирішить проблеми з плутаницями.
Метою роботи є проектування та розробка програмної системи для контролю логістичного забезпечення війська. Задля досягнення мети слід розробити систему, яка буде складатися з чотирьох елементів: серверного додатку, веб-клієнту, мобільного застосунку та ІоТ пристрою.
Створення даної системи має наступні переваги: надання прозорості у розподілі ресурсів, точного обліку, зменшує ризики розкрадання, пришвидшує процеси виконання наказів на постачання та загалом пришвидшує роботу логістичного забезпечення.
Під час виконання курсової роботи буде створено програмну систему для контролю логістичного забезпечення війська, що покращить контроль логістичного забезпечення, наддасть автоматизацію процесів, зменшить кількість часу на виконання операцій з ресурсами та наддасть прозорість, щодо їх розподілення.


1 БІЗНЕСН ВИМОГИ
1.1	Передумови


Зараз Україна перебуває у важкому становищі повномасштабної війни, і виникли певні недоліки у контролі логістичного забезпечення війська, а саме низький рівень автоматизації процесів, що призводить до великої кількості ручної роботи та помилок, недостатня прозорість і контроль за витратами та розподілом ресурсів, що збільшує ризики розкрадання та неправомірного використання, що є результатом відсутності програмної системи для контролю логістичного забезпечення війська.[4] Ще однією передумовою для створення програмної системи для контролю логістичного забезпечення війська є те, що вже вступила в дію умова про оборонну реформу, яка спрямована на підвищення оборонних спроможностей та сумісності з силами НАТО і ЄС, виникає нагальна потреба у створенні інноваційної системи логістичного забезпечення. Це затверджено у Стратегічному оборонному бюлетені у завданні 1.4.8, яке вимагає створення програмної інформаційної системи для управління оборонними ресурсами
Програмна система «UA Logistics» створена для покращення контролю логістичного забезпечення, звітності про ресурси та можливості електронного зберігання їх розподілення і поставок між бойовими групами. Основні переваги системи:
-	Надає можливість точного обліку витрачених і отриманих ресурсів, що підвищує прозорість і зменшує ризики розкрадання.
-	Забезпечує швидкий і надійний обмін даними між бойовими підрозділами, що підвищує ефективність їхньої взаємодії.



1.2	 Бізнес можливості


На разі ринок в Україні активно розвивається галузь військово-технічного виробництва. Країні необхідні нові програмні системи, технічне обладнання, смарт пристрої та винаходи для покращення обороноздатності та військової потужності, для боротьби з ворогом. Ця  динаміка створює значні можливості для створення програмних інформаційних систем і загалом нових винаходів, які підтримуються державою. І ці потреби мають бути задоволені.

Ринкова можливість:
На ринку програмних систем існую потреба у програмній системі, як дозволить покращити управління логістичним забезпеченням та його контролем, плануванням поновлення ресурсів, слідкування за готовністю війська та його комплектацією для виконання бойових задач різного характеру. А також ця система повинна зменшити кількість корупції та розкрадання у логістиці Збройних сил України. Відсутність такої системи призводить до проблем у виконанні задач, які ставляться командуванням ЗСУ, низької ефективності підрозділів та зайвих втрат грошей.
Конкурентне середовище:
На ринку оборонної промисловості конкурентом може бути «LOGFAS» (див. рис.1).[3]

Переваги «LOGFAS»:
-	 «LOGFAS» має досить великий набір сервісів, що мають різну функціональність, а саме сервіс підтримки логістичнихоперацій (Logistics Functional Area
Application Service), що дозволяє користувачам збирати, зберігати, обробляти, аналізувати, відображати та розповсюджувати інформацію для підтримки логістичних операцій, сервіс логістичної розвідки та підтримки рішень (Logistics Business Intelligence and Decision Support Application Services), сервіс підтримки інженерного (в розумінні квартирно-експлуатаційного) забезпечення (Integrated Engineering Management System Support Service), сервіс відслідковування місцезнаходження предметів, сервіс підтримки медичного забезпечення.
-	«LOGFAS» поєднує у собі управління та координації логістичними даними та ресурсами, що допомагає забезпечити ефективність та оптимальність управління логістичними процесами.

Недоліки «LOGFAS»:
-	Складність використання система має досить складний інтерфейс, та багато базових під сервісів без яких вона не може повністю працювати. Через це «LOGFAS» є складним для вивчення, та з врахуванням, що лише спеціалісти з НАТО можуть навчити користуванню ним це викликає труднощі та подовження часу навчання персоналу.
-	Обмежений доступ через те, що Україна не входить до блоку країн НАТО, вона не має доступу до вихідного коду програми, тому вона не має можливості щось змінювати під себе.
-	Не зрозумілий інтерфейс: «LOGFAS» має застарілий інтерфейс, який може викликати труднощі у користуванні.


Рисунок 1 – Приклад інтерфейсу системи «LOGFAS»

Також приклад інших систем:
GCSS-Army – це система, що використовує централізовану базу даних для управління постачанням, технічним обслуговуванням, транспортуванням та іншими логістичними операціями.
Переваги: Висока інтеграція з іншими військовими системами, покращена прозорість та звітність.
Недоліки: Складна для впровадження та навчання, висока вартість обслуговування.
SAMS-E (Standard Army Maintenance System-Enhanced) – це система, що пропонує модулі для управління технічним обслуговуванням, запасами та замовленнями на постачання.
Переваги: Підтримує багатофункціональні процеси логістики, детальна звітність.
Недоліки: Складність у налаштуванні та навчанні персоналу, потреба у постійних оновленнях.

Проблеми, що потребують вирішення у логістиці:
-	Нездатність ефективно використовувати ресурси та правильно, і вигідно ними користуватися.
-	Недостатня прозорість і контроль за витратами та розподілом ресурсів, що збільшує ризики розкрадання та неправомірного використання.
-	Низький рівень автоматизації процесів, що призводить до великої кількості ручної роботи та помилок.

Щодо монетизації застосунку том існує декілька варіантів:
-	Співпраця з державними установами для забезпечення фінансування та підтримки проєкту.
-	Продаж ліцензій на використання програмної системи для різних підрозділів та організацій.
-	Надання послуг з впровадження та навчання персоналу.
-	Державне фінансування, а саме отримання грантів та фінансування від держави на розробку та підтримку системи.


1.3	 Бізнес-цілі та критерії успіху


Бізнес-цілі програмної системи для контролю логістичного забезпечення війська полягають у створенні зручного та ефективного рішення для Збройних сил України. Мета – мінімізація часу для керуванням забезпеченням війська, також зменшення часу на доставку необхідних ресурсів, та кількості розкрадань, а також створенням можливості отримання корисної інформації з стану забезпечення війська.



Бізнес-цілі:
-	Зменшити час прийняття рішень, щодо поставок певних ресурсів підрозділам, які цього потребують на 40% протягом першого року;
-	Зменшити рівень розкрадання логістичних поставок на 50% протягом перших двох років;
-	Покращити рівень забезпечення бойових підрозділів на 15% протягом першого року;
-	Покращити швидкість виконання логістичного забезпечення на 20% протягом першого року;
-	Покращити умови несення служби у Збройних силах України на 15% протягом перших півтора року.

Критерії успіху:
-	Зменшення зайвих витрат на забезпечення ЗСУ на 20% за перший рік;
-	Покращення боєздатності та обороноздатності війська на 15% протягом першого року;
-	Зменшення часу планування і максимізації спроможності швидкого обміну відповідними логістичними планами, звітами та іншою інформацією, відповідно на 20% та 15% протягом першого року.


1.4	 Потреби клієнтів або ринку


Проєкт орієнтується військове керівництво України, загалом це люди від 20 до 50 років. І зараз розвивається тенденція від переходу радянського стандарту війська до стандартів НАТО, а країни цього блоку в свою чергу користуються спеціальними застосунками для планування логістичного забезпечення свого війська.

Потреби споживачів:
-	Командування ЗСУ потребують застосунку за допомогою якого, вони зможуть більш ефективно проводити логістичні операції, а також мають потребу у їх пришвидшенні задля перемоги над ворогом;
-	Україна, як держава, зацікавлена у даному програмному продукту для подолання розкрадань поставок;
-	Військові зацікавлені у злагодженому забезпеченні ресурсами, бо вони є необхідними для збереження їх життя та виконання бойових задач.

Програмна система є актуальною і потрібною, бо вирішує велику кількість проблем, щодо організації, оптимізації та контролю процесу логістичного забезпечення.

Незадоволені потреби ринку оборонної промисловості України:
-	Недостатність централізованого та ефективного управління логістикою.
-	Недоукомплектовані підрозділі Збройних сил України через відсутність швидкого обміну даними, щодо їх ресурсів.
-	Досить високий рівень розкрадання ресурсів під час їх доставки;
-	Відсутність злагодженого забезпечення, через відсутність чіткого розуміння та бачення того, що кому потрібно.



Вирішення потреб логістичних проблем ЗСУ:
-	Програмна система надає можливість підрозділам вести облік кількості ресурсів, а саме гуманітарних та військових, також є можливість дивитися за станом особового складу.
-	Командири підрозділів Збройних сил України можуть робити запити на певні потреби у електронному форматі, що пришвидшує швидкість прийняття рішень.
-	Система надає прозорість, а саме можливість перегляду, хто саме виконує певні поставки ресурсів, таким чином кількість розкрадань буде зменшена;
-	За рахунок того, що система буде централізована буде покращена ефективність розробки логістичних операцій та буде надаватися чітка картина того, що відбувається у підрозділах.
-	Програмна система пришвидшує обмін інформацією між підрозділами та командуванням, що дає більш чітке розуміння того, що відбувається та призводить до більш швидкого прийняття рішень.
Програмна система підтримує віддалений доступ через мобільні додатки та веб-інтерфейс.


1.5	 Бізнес ризики


Зважаючи на минулі роки, ризиком для впровадження UA Logistics можуть стати епідемії такого масштабу як COVID-19 2020-2023 років, іспанський грип 1918 року та грипу A (H1N1) 2009 року. Ці проблеми можуть уповільнити вихід програмної системи.
Зараз Україна втягнута у повномасштабну війну і зазнає  постійних обстрілів енергосистеми, а також частина команда, яка знаходиться в Україні також перебуває у зоні ризику, що може теж призвести до сповільнення розробки.
Також ризиками можуть бути: зростання кількості кібернападів, зокрема DDoS-атак, фішинг-атак та шкідливого програмного забезпечення, може призвести до порушення роботи системи, витоку даних та фінансових втрат, атаки на IoT пристрої, які можуть бути менш захищені, ніж інші компоненти системи та Фінансові кризи або економічні спади можуть вплинути на фінансування проєкту та зниження попиту на послуги.



2 КОНЦЕПЦІЯ РІШЕННЯ
2.1 Окреслення концепції


Метою нашої програмної системи є суттєве покращення управління та контролю логістичного забезпечення Збройних сил України. Ми прагнемо створити надійний інструмент, який дозволить командуванню ЗСУ ефективно планувати та проводити логістичні операції, а також пришвидшити поставки ресурсів підрозділам. Наша система забезпечить військових усім необхідним для успішного виконання бойових завдань, підвищуючи їхню ефективність та моральний дух.
Конкретні завдання та обов'язки системи включають:
-	Забезпечення точного та своєчасного звітування про розподіл ресурсів між бойовими групами, стан запасів, запити на постачання та підтвердження виконання поставок.
-	Моніторинг кількості ресурсів, що залишилися для виконання завдань, та управління їх розподілом.
-	Відстеження руху машин постачання та перевірка їх проходження через блокпости за допомогою IoT пристроїв.
-	Використання JWT токенів для автентифікації користувачів та захисту ресурсів, що забезпечує надійний контроль доступу до системи.
Ключові особливості системи:
-	Система автоматизує багато рутинних завдань, що дозволяє значно знизити навантаження на персонал та зменшити ймовірність помилок.
-	Впровадження аналітичних інструментів для точного прогнозування потреб у ресурсах та планування їх постачання.
-	Система дозволяє оптимізувати процеси управління ресурсами, що призводить до значного зменшення втрат та підвищення ефективності логістичних операцій.
Прагнемо до створення такої системи, яка забезпечить ефективний контроль, оптимізацію та швидкість планування логістичних операцій, що призведе до покращення боєздатності та ефективності Збройних сил України.


2.2 Головна функціональність


Програмна система контролю логістичного забезпечення війська пропонує широкий спектр функцій, які суттєво покращують управління ресурсами та забезпечують високий рівень безпеки даних. Перелік основних функцій:
-	Централізоване система управління логістичним забезпеченням,  система надає централізований контроль логістичних процесів, а саме їх виділення, поставку, запити нових ресурсів та оновлення,  дозволяючи командуванню ефективно розподіляти ресурси та стежити за їх використанням.
-	Система для контролю кількості ресурсів підрозділів, а саме користувачі можуть переглядати стан особового складу та його готовність до виконання бойових завдань, що допомагає в управлінні людськими ресурсами.
-	Мобільний доступ та зручний веб-застосунок, програмна система доступна через мобільний застосунок та веб-інтерфейс для зручного доступу до даних у будь-який час.
-	Формування запитів, щодо потреб підрозділів та подача їх на розглядання командуванню через мобільний застосунок, що пришвидшує процес затвердження та постачання.
-	Відслідковування процесу виконання поставок ресурсів, а саме хто їх виконує та сам процес доставки, дозволяє відстежувати процес доставки ресурсів, включаючи інформацію про виконавців та стан доставки, що забезпечує прозорість та контроль.
-	Використання RFID для отримання інформації про машину ІоТ пристроєм, що замінює людину, таким чином автоматизує процес перевірки машин постачання та запису їх у базу даних та дозволяє вищому командуванню отримувати точну інформацію про те, що перевозиться і куди.

Ці ключові функції допоможуть воєнному керівництву Збройних сил України забезпечити більш ефективне управління логістичними операціями та вирішить проблеми з плутаницями.

Система реалізує високий рівень безпеки даних, використовуючи такі технології та методи, а саме авторизація з використанням JWT токенів для захисту ресурсів та контролю доступу до них. Кожен токен містить зашифровану інформацію про користувача та його права доступу. Паролі користувачів шифруються за допомогою BCryptPasswordEncoder, що забезпечує високий рівень безпеки. Кожен пароль зберігається у вигляді хешу з солью, що ускладнює його розшифровку. Використання HTTPS для захисту даних, що передаються між клієнтами та сервером, запобігає їх перехопленню та модифікації. Всі передачі даних шифруються за допомогою сучасних криптографічних алгоритмів.
Ці заходи забезпечують конфіденційність, цілісність та доступність даних, що є критично важливим для військових застосунків.



2.3 Припущення та залежності


Перш за все проєкт буде залежати від доступу до інтернету, бо без нього не буду працювати централізоване управління системи пов’язане через мобайл та веб додатки, також буде присутня залежність від IOT пристроїв, які будуть використовуватися, для отримання інформації про грузи та напрямки його відправлення. Ще необхідним будуть потрібні надійні сервіси для хостингу мобайл та веб-додатку.


3 РАМКИ ТА ОБМЕЖЕННЯ  ПРОЄКТУ
3.1 Рамки первинного випуску


Початковий випуск нашої програмна система для контролю логістичного забезпечення війська буде фокусуватися на основних функціях та характеристиках, які забезпечать найвищий рівень продуктивності для військової логістики. Основні функції та характеристики, що будуть включені в цей реліз, забезпечать централізоване управління, ефективний контроль та безпеку даних.

Ось основні функції та характеристики, які будуть включені в цей реліз серверного застосунку з веб-клієнтом:
-	Авторизація з використанням JWT токенів, що надає захист ресурсів та контроль доступу до них. Налаштування цього механізму розташовані у пакеті config та token. У пакеті config реалізовано клас SecurityConfig.java, що задає доступ до ресурсів, а пакеті token знаходиться логіка створення JWT токенів та їх обробка;
-	Можливість адмінів створювати блок пости та встановлювати на них розумні пристрої, які будуть сканувати машини постачання.
-	Можливість командирів бойових груп створювати бойові підрозділи та надавати їм ресурси для виконання бойових задач.
-	Можливість командирів бойових груп оновлювати стан ресурсів бойових груп.
-	Можливість командирів бойових груп надавати ресурси дочірнім бойовим групам за їх запитом.
-	Можливість командирів бойових груп переглядати стан власної бойової групи.
-	Можливість командирів бойових груп робити запити на постачання ресурсів.
-	Можливість командирів бойових груп назначати командирів їх дочірніх бойових груп.
-	Можливість командирів бойових груп переглядати запити на постачання їх дочірніх бойових груп.
-	Можливість командирів логістичних рот приймати задачі на постачання ресурсів у бригаду.
-	Можливість командирів логістичних груп підтвердження доставки ресурсів.
-	Можливість командирів бойових груп створення машин постачання для перевезення ресурсів.
-	Отримання командирами підрозділів повідомлень про потребу у ресурсах після оновлень за рахунок коефіцієнту ресурсів, які повинні залишатися після виконання бойового завдання.

Функціонал, що буде виконувати ІоТ пристрій:
-	Можливість запису проходу машиною постачання блок посту та запису її перегляду у базу даних.
-	Вивід інформації про неї в залежності від її рівня секретності та рівня доступу ІоТ пристрою, за допомогою ІоТ пристрою.
-	Можливість адміністратора конфігурувати ІоТ пристрій за допомогою застосунку для конфігурації, через підключення до локальної мережі до якої під’єднаний ІоТ девайс.



Можливості у мобільному застосунку:
-	Можливість командирів взводів виконувати операції з оновлення даних про підрозділ.
-	Створення запитів на постачання певних ресурсів для підрозділу.
-	Можливість підтверджувати виконання запитів на постачання ресурсів.
-	Можливість перегляду запитів взвода та стану їх виконання.

Ці функції дозволять військовому керівництву України мінімізувати час для керуванням забезпеченням війська та прийняття рішень, також зменшення часу, на доставку необхідних ресурсів, та кількості розкрадань, а також створенням можливості отримання корисної інформації з стану забезпечення війська. Початковий випуск буде спрямований на надання найважливіших інструментів для оптимізації військової логістики.


3.2 Рамки наступних випусків


Наступні версії програмної системи будуть включати розширення функціоналу, покращення дизайну застосунку, оновлення старих функцій та підвищення швидкості усієї системи та її безпеки.

Будуть впроваджуватися наступні функції:
-	Розширення роду військ, для яких буде можливість використання цієї системи.
-	Додавання штучного інтелекту, який міг би аналізувати інформацію на полі бою та міг би давати рекомендації щодо прийняття рішень.
-	Для мобільного додатку створення функції для оформлення зборів на потреби підрозділів їх командирами.
-	Можливість слідкування за доставкою ресурсів у реальному часі.


3.3 Обмеження та винятки


Одним із головних виключень на початковому етапі буде обмеження роду військ для яких буде можливо використовувати систему, бо для інтеграції її з усіма родами військ потрібно багато часу та затрат, тому для першої версій це реалізовуватися не буде.
Також функції, які не відповідають загальним стратегічним цілям продукту або які є надто специфічними, можуть не бути включені в початковий випуск.
Окрім цього на початковому етапі не планується включення інструментів, які будуть допомагати аналізувати дані для прийняття рішень.
Не буде вводитися можливість точного відстеження підрозділів на географічних мапах, подібно до того як це представлено у додатку «LOGFAS», через можливість втрати коду, бо зараз відбуваються активні бойові дії.


4 БІЗНЕС-КОНТЕКСТ
4.1 Профілі зацікавлених сторін


Зацікавлені сторони представляють індивідуальні особи, групи або організації, які взаємодіють активно або мають частку в участі в проєкті, впливаючи  на його результати або їм піддаються. Визначення профілів зацікавлених сторін є важливим етапом розробки проєкту і допомагає краще зрозуміти їх потреби та очікування. Профілі зацікавлених сторін ідентифікують клієнтів цього продукту, а також інших зацікавлених сторін та вказують їхні основні інтереси у цьому проєкті (таблиця 1).

Таблиця 1 – Профілі зацікавлених сторін
Зацікавлена сторона	Головна цінність	Ставлення	Головний інтерес	Обмеження
Верховний головнокомандувач	Збільшення безпеки країни	Дивіться на продукт як на шлях переваги над ворогом. та покращення боєздатності війська на 20%.	Набір функцій,  які більш підходять до структури та устрою нашого війська та залучення сучасних технологій.	Максимальний бюджет = 800 тис. дол., для першої версії програмної системи
Головнокомандувач ЗСУ	Покращення бачення, щодо забезпечення підрозділів.	Дивляться на продукт як на інструмент для швидкого виконання та більш продуктивного виконання роботи.	Зменшується кількість помилок, з’являється додатковий час на виконання більш важливих завдань.	Необхідно мати доступ до персонального комп'ютера або ноутбука, а також підключення до Інтернету.



Продовження таблиці 1
Зацікавлена сторона	Головна цінність	Ставлення	Головний інтерес	Обмеження
Командування логістичних підрозділів	Зменшення часу планування логістичних операцій.	Дивляться на продукт як на інструмент для вирішення непорозумінь у потребах бойових підрозділів.	Покращення проведення логістичних операцій та планування поставок ресурсів.	Повинні працювати на малогабаритних пристроях.
Командування бойових підрозділів	Можливість
слідкувати за кількістю ресурсів та станом особового складу.	Корисний інструмент для обміну інформацією між верховним командуванням та логістичними підрозділами.	Швидкість  обміну інформацією, чітке розуміння готовності до виконання бойових завдань, підвищення ефективності комунікації між верховник командуванням.  	Інтерфейс має бути легким у використанні та
система повинна зберігати усі дані на сервері, а не на пристроях.

Ця таблиця надає інформацію про зацікавлені сторони у проєкті програмного продукту для контролю стану водія, їх обмеження, основні інтереси, ставлення до продукту та основну цінність, яку вони очікують від системи контролю.


4.2 Пріоритети проєкту


Пріоритети проєкту визначають, які аспекти проєкту є найважливішими та піддані перевірці та керуванню для забезпечення успішного завершення проєкту. Кожне пріорітет має свої обмеження та характеристики.


Час:
-	Завершення виконання проєкту повинно відбутися до затвердженого графіку, щоб забезпечити своєчасне впровадження системи на ринок та уникнути додаткових витрат, пов'язаних з можливими затримками.
-	Постійно відстежувати дотримання графіку та оперативно реагувати на можливі затримки.
Якість:
-	Якість програмного продукту є найбільш пріоритетною. Усі розроблені функції та можливості повинні відповідати встановленим вимогам та стандартам якості.
-	Тестування та контроль якості є обов'язковими етапами в процесі розробки.
Бюджет:
-	Перебільшення бюджету не повинно перевищувати 10%, щоб уникнути фінансових труднощів та забезпечити економічну стабільність проєкту.
-	Потрібен моніторинг витрат, а саме постійно контролювати стан бюджету та витрати
Розмір команди:
-	Кількість людей у команді  не повинна перевищувати 15 осіб, задля ефективного спілкування у команді та зменшення вірогідності потрапляння до неї агентів ворожої сторони.
Функціональність:
-	При першому випуску повинні бути реалізовану усі ключові функціональні можливості з розділу 3.1.
-	Пропозиції та ідеї щодо нових функцій можуть бути враховані в майбутніх релізах.

Незавершеність проєкту:
-	Під часу випуску програмної системи рівень не завершеності не повинен бути більше 10% від ключового функціоналу з розділ 3.1.
Для досягнення успішного завершення проєкту та найкращих результатів при обмежених ресурсах, бюджеті і часі, критично важливо чітко визначити пріоритети. Збалансований підхід до цих пріоритетів гарантує успішну реалізацію проєкту.


4.3 Робоче середовище


Програмний продукт «UA Logistics» розділений на чотири основні компоненти: серверну частину, веб-клієнт, мобільний застосунок, а також IoT пристрої.
Серверна частина написана на Spring Boot 3 з використанням фреймворків Spring Security та Spring Data JPA.[1] Для надання безпеки використовується JWT (JSON Web Tokens) для автентифікації користувачів і контролю доступу до ресурсів. Паролі шифруються за допомогою BCryptPasswordEncoder. Для збереження даних використовується реляційна база даних PostgreSQL з інструментом Liquibase для контролю змін у базі даних. Взаємодія з базою даних здійснюється через Hibernate та Spring Data JPA, що забезпечує просту роботу з базами даних та високу продуктивність.
Серверний застосунок побудовано як троьхрівневий моноліт з UI, бізнес логіки та рівня доступу до даних. Рівень UI  побудована за архітектурою MVC (Model-View-Controller), де View – це код який обробляє запити, контроллер перенаправляє отримані данні з запиту до моделі, якої є шар бізнес логіки. Шар доступу до даних реалізує шаблон репозиторій. Це забезпечує гнучкість, легкість створення нового функціоналу та редагування існуючого. Реалізовані Exception Handling та Validation.
Веб-додаток розроблений з використанням HTML, CSS, TypeScript та Angular.[5] Він  є кросплатформеним, оскільки дає можливість працювати на будь-якій операційній системі з підтримкою браузера, який підтримує HTML5. Щодо локалізації, то на першому етапі підтримуються українська та англійська мови з використанням i18n.
Для оптимізації продуктивності використовуються засоби реактивного програмування, що покращує швидкість реакції та відгук клієнтської частини системи.
Мобільний сервіс розроблений на мові Java і працює на операційній системі Android. Доступний для користувачів Android версії 6.0 та новіших. Для розробки використовуються сучасні інструменти, що забезпечують швидку та ефективну роботу застосунку. Зокрема, застосунок використовує Android SDK для доступу до функціоналу операційної системи, Retrofit для спрощення мережевих запитів, та Room для роботи з базами даних на пристрої. Також застосовується Dagger для управління залежностями, що дозволяє підвищити модульність та тестованість коду.
ІоТ пристрій реалізований як сервіс, для симуляції робити фізичного пристрою. Архітектура IoT девайсів складається з трьох шарів: UI, бізнес-логіки та з’єднання з API. Шар UI забезпечує взаємодію з користувачем через консольний застосунок. Шар бізнес-логіки обробляє відповіді від серверу, формулює інформацію для відправки на сервер, виконує читання даних про девайс та запис їх у конфігураційний файл. Шар з’єднання з API відправляє запити на сервер для автентифікації та передачі даних про сканування машин постачання. Використовує пакет «java.net» для створення і керування HTTP-з'єднаннями. Щодо конфігурації  адміністратор налаштовує пристрій через консольний застосунок, передаючи дані про девайс, включаючи його ID, логін та URL для відправки даних та автентифікації.

Доступність та обмеження:
-	Користувачі можуть звертатися до програмного продукту лише в Україні. За необхідності, доступ може бути наданий союзникам України з обмеженим функціоналом.
-	На першому етапі підтримуються лише українська та англійська мови.
-	Потрібен постійний доступ до глобальної мережі Інтернет, наразі із залежністю від ресурсів Starlink.
-	На початку мобільний застосунок буде працювати лише під систему Android.

Для користування веб-додатку потрібен браузер, що підтримує HTML5, та відповідна операційна система: Windows від XP, Linux, MacOS від Sierra. Для використання мобільного застосунку потрібен смартфон або планшет з підтримкою операційної системи Android від версії 6.0.
Щодо ризиків, то їх декілька: використання застарілих версій браузерів може призвести до проблем із відображенням стильових елементів, проблеми з інтернет-з'єднанням можуть вплинути на доступність функцій, які потребують зв’язку з сервером, Залежність від конкретних хмарних сервісів або провайдерів може створити ризик втрати доступу до критичних ресурсів.
Вимоги до продуктивності
Час завантаження сайту: До 5 секунд.
Відгук на дії користувача: Миттєвий.
Оповіщення: Анонсування успішних або невдалих операцій.

5 РОЗРОБКА СЕРВЕРНОЇ ЧАСТИНИ
5.1 Архітектура системи


Серверна частина програмної системи написана на Spring Boot 3, з використанням Spring Security Framework та Spring Data JPA. Ці фреймворки забезпечують швидку конфігурацію проєкту та його надійність. Для автентифікації користувачів використовувався лінійний механізм з використанням JWT(JSON Web Tokens). За допомогою JWT токенів забезпечується безпека та контроль доступу до ресурсів програмної системи. Шифрування паролів виконується за допомогою BCryptPasswordEncoder і це дає високий рівень безпеки. Для зберігання даних була обрана реляційна база даних PostgreSQL. Разом з нею використовується Liquibase для контролю змін у базі даних.  Програмна система взаємодіє з користувачами, приймає запити від них, виконує бізнес логіку та потім взаємодіє з базою даних за допомогою Hibernate та Spring Data JPA. Ці ORM забезпечують просту роботу з базами даних. Локалізація відсутня, вона буде зроблена для frontend застосунку за допомогою i18n. Frontend, мобільний застосунок взаємодіють з backend-ом через REST API, користуючись HTTP запитами. ІоТ також взаємодіє з сервером через HTTP запит. Також є консольний застосунок, який потрібен для оновлення ІоТ, який взаємодіє з ним за рахунок підключення до однієї локальної мережи та передачі потрібної інформації на порти пристроїв у локальній мережі. Взаємодіє компонентів зображено на діаграмі розгортання (див. Додаток А).
Структура серверного додатку побудована зо структурою MVC, яка зображена на (див. Додаток А). Ця структура розділяє застосунок на три основні компоненти, а саме: контролер, модель, сервіси. MVC надає гнучкості, що дає легкість створення нового функціоналу або редагування старого. Також у програмі реалізовано Exception Handling та Validation.
На сервері організована пакетна структура, де кожний пакет відповідає за певну частину функціоналу. Це полегшує розуміння програмної системи та підтримку проєкту.
Також слід зазначити, що для випуску програмної системи слід додати методи шифрування системи загалом, оскільки платформа зараз розробляється більш під військові цілі.


5.2 Структура бази даних


	Для зберігання даних була обрана реляційна СУБД «PostgreSQL». Для відображення структури бази даних була створення ER діаграма (див. Додаток А) яка є основою для створення бази даних. Таблиці створювалися на основі структури ЗСУ.[2] Вона складається з 19 таблиць: користувачів, токенів, Бойових груп(бригада, батальйон, рота, взвод, логістична рота), бойових командирів(бригадний командир, командир батальйону, командир роти, командири взводу та логістичної роти), таблиця для відмітки автівок (car_check), таблиця виданих ресурсів(given_resources), таблиця запитів на постачання(supply_request), таблиця запрошених ресурсів(resources_request), таблиця девайсів для сканування (scanning devices), та таблиця блок постів(post).
У базі даних наявні наступні зв’язки між сутностями:
-   Бригадний командир один до багатьох з командиром батальйонів.
-	Бригадний командир один до багатьох з виданими ресурсами.
-	Бригадний командир один до одного з бригадою.
-	Бригадний командир один до багатьох з командиром логістичної роти.
-	Командири бойових груп один до одного з користувачем.
-	Бригада одна до багатьох з батальйоном.
-	Бригада одна до багатьох з логістичними ротами.
-	Бригада одна до багатьох з виданими ресурсами.
-	Бригада одна до багатьох з командирами батальйону.
-	Командир батальйону один до одного з батальйоном.
-	Командир батальйону один до багатьох з командирами роти.
-	Командир батальйону один до одного з виданими ресурсами.
-	Батальйон один до багатьох з ротами.
-	Командир роти один до багатьох з командирами взводів.
-	Командир роти один до одного з ротою.
-	Командир роти один до багатьох з виданими ресурсами.
-	Рота один до багатьох з взводами.
-	Командир взводу один до багатьох з виданими ресурсами.
-	Командир взводу один до одного зі взводом.
-	Командир логістичної роти один до одного з логістичною ротою.
-	Командир логістичної роти один до багатьох з виданими ресурсами.
-	Логістична рота один до багатьох з машиною постачання.
-	Машина постачання один до багатьох з перевіркою машини.
-	Машина для постачання один до одного з ресурсами постачання.
-	Ресурси постачання один до одного з запитаними ресурсами.
-	Пост один до багатьох або жодного з скануючим девайсом.
-	Скануючий девайс один до  багатьох з перевіркою машин.


5.3 Бізнес логіка


Головним функціоналом програмної системи контролю логістичного забезпечення війська є електронна звітність та можливості слідкування за розподілом ресурсів між бойовими групами, запитами на постачання підтвердження виконання поставок, контроль кількості ресурсів, що залишилися для виконання завдань, слідкування за проходженнями машин постачання та перегляд чіткої звітності хто запросив їх та хто надав. На діаграмі прецедентів відображено основну логіку, функціональність серверного застосунку та взаємодію користувачів з ним (див. Додаток А).
Функції, що реалізовані у додатку:
-	Авторизація з використанням JWT токенів, що надає захист ресурсів та контроль доступу до них. Налаштування цього механізму розташовані у пакеті config та token. У пакеті config реалізовано клас SecurityConfig.java, що задає доступ до ресурсів, а пакеті token знаходиться логіка створення JWT токенів та їх обробка;
-	Можливість адмінів створювати блок пости та встановлювати на них розумні пристрої, які будуть сканувати машини постачання.
-	Можливість командирів бойових груп створювати бойові підрозділи та надавати їм ресурси для виконання бойових задач.
-	Можливість командирів бойових груп оновлювати стан ресурсів бойових груп.
-	Можливість командирів бойових груп надавати ресурси дочірнім бойовим групам за їх запитом.
-	Можливість командирів бойових груп переглядати стан власної бойової групи.
-	Можливість командирів бойових груп робити запити на постачання ресурсів.
-	Можливість командирів бойових груп назначати командирів їх дочірніх бойових груп.
-	Можливість командирів бойових груп переглядати запити на постачання їх дочірніх бойових груп.
-	Можливість командирів логістичних рот приймати задачі на постачання ресурсів у бригаду.
-	Можливість командирів логістичних груп підтвердження доставки ресурсів.
-	Можливість командирів бойових груп створення машин постачання для перевезення ресурсів.
-	Отримання командирами підрозділів повідомлень про потребу у ресурсах після оновлень за рахунок коефіцієнту ресурсів, які повинні залишатися після виконання бойового завдання.
-	Можливість запису проходу машиною постачання блок посту та запис рівня її перегляду, за допомогою ІоТ пристрою.
Наведені функції відображають основні можливості та процеси, які полегшують контроль розподілення ресурсів між бойовими групами та постачання, та запобігає втраті даних про операції з ресурсами їх підробці, а також надає можливість більш швидко розібратися де саме відбулися певні проблеми у постачанні.
Під час реалізації цього функціоналу дотримувалися правила чистого коду, однак через ситуацією зі світлом є місця де код не допрацьований.
CamelCase та описові назви: Дотримання назв класів, методів та змінних з CamelCase та використання описових назв, які чітко відображають їхню функціональність.
Форматування коду: Використання стандартних правил форматування, правильна відступів, розташування дужок тощо. Використання іменованих конвенцій Spring: Використання конвенцій іменування для створення контролерів, сервісів, репозиторіїв і т. д. у Spring, таких як BrigadeCommanderController, BrigadeCommanderService, BrigadeCommanderRepository.
Використання компонентної архітектури Spring: Розділення коду на компоненти, використання анотацій Spring для правильного управління залежностями та іншими аспектами. Безпека: Застосування засобів безпеки, таких як Spring Security, для захисту ресурсів.


5.4 Специфікація запитів


REST API в даному проєкті складається із 45 кінцевої точки. Кожний ендпоінт відповідає за надання даних клієнту та виконання бізнес логіки. Специфікація кожного ендпоінту наведена у виді таблиці (див. таб. 2)

Таблиця 2 – Специфікація REST API
Рівень доступу	Ендпоінт	HTTP метод	Призначення
Everybody	/api/auth/register	POST	Реєстрація користувача
Everybody	/api/auth/authenticate	POST	Автентифікація користувача


Продовження таблиці 2
Рівень доступу	Ендпоінт	HTTP метод	Призначення
Logistic Commander	/api/log-com/confirm/delivery-of-supply-request/{id}	PUT	Підтвердження доставки ресурсів
Logistic Commander	/api/log-com/create/supply-car	POST	Створення машини постачання
Logistic Commander	/api/log-com/get/all-requests	GET	Перегляд усіх запитів на постачання
Logistic Commander	/api/log-com/get/car-checks/{id}	GET	Перегляд сканувань машини постачання
Battalion
Commander	/api/bat-com/battalion-company-groups	GET	Отримання рот батальйону
Battalion
Commander	/api/bat-com/confirm/getting-of-resources	PUT	Підтвердження отримання ресурсів
Battalion
Commander	/api/bat-com/create/company	POST	Створення роти
Battalion
Commander	/api/bat-com/get-battalion-resources	GET	Отримання стану ресурсів батальйону
Battalion
Commander	/api/bat-com/get/battalion-requests	GET	Перегляд запитів батальйону
Продовження таблиці 2
Рівень доступу	Ендпоінт	HTTP метод	Призначення
Battalion
Commander	/api/bat-com/get/company-requests	GET	Отримання ресурсів роти
Battalion
Commander	/api/bat-com/update/battalion-resources	PUT	Оновлення ресурсів батальйону
Company Commander	/api/com-com/ask/for-resources	POST	Запит на поставку ресурсів
Company Commander	/api/com-com/assign/plat-commander	PUT	Призначення командира взводу
Company Commander	/api/com-com/company-plat-groups	GET	Отримання взводів роти
Company Commander	/api/com-com/confirm/getting-of-resources	PUT	Підтвердження отримання ресурсів ротою
Company Commander	/api/com-com/create/plat	POST	Створення взводу
Company Commander	/api/com-com/get-company-resources	GET	Отримання ресурсів роти

Продовження таблиці 2
Рівень доступу	Ендпоінт	HTTP метод	Призначення
Company Commander	/api/com-com/get/company-requests	GET	Отримання запитів власної роти
Brigade Commander	/api/brig-com/assign/battalion-commander	PUT	Призначення командира батальйону
Company Commander	/api/com-com/get/plat-requests	GET	Отримання запитів взводів роти
Company Commander	/api/com-com/send/resources-to-plat	POST	Відправка ресурсів взводу
Company Commander	/api/com-com/update/company-resources	PUT	Оновлення стану роти
Plat Commander	/api/plat-com/ask/for-resources	POST	Запит на постачання ресурсів
Plat Commander	/api/plat-com/confirm/getting-of-resources	PUT	Підтвердження отримання ресурсів
Plat Commander	/api/plat-com/get/plat-requests	GET	Отримання запитів взводу

Продовження таблиці 2
Рівень доступу	Ендпоінт	HTTP метод	Призначення
Plat Commander	/api/plat-com/update/plat-resources	PUT	Оновлення ресурсів взводу
Brigade Commander	/api/brig-com/assign/logistic-commander	PUT	Призначення логістичного командира
Brigade Commander	/api/brig-com/assign/battalion-commander	PUT	Призначення командира батальйона
Brigade Commander	/api/brig-com/brigade-battalion-groups	GET	Перегляд батальйоній бригади
Brigade Commander	/api/brig-com/confirm/getting-of-resources	PUT	Підтвердження отримання ресурсів
Brigade Commander	/api/brig-com/create/battalion	POST	Створення батальйону
Brigade Commander	/api/brig-com/create/brigade	POST	Створення бригади
Brigade Commander	/api/brig-com/create/logistic-company	POST	Створення логістичної роти
Brigade Commander	/api/brig-com/get-brigade-resources	GET	Отримання ресурсів бригади

Продовження таблиці 2
Рівень доступу	Ендпоінт	HTTP метод	Призначення
Brigade Commander	/api/brig-com/get/battalion-requests	GET	Отримання запитів на постачання батальйону
Brigade Commander	/api/brig-com/send/resources-to-battalion	POST	Відправити ресурси до батальйону
Brigade Commander	/api/brig-com/get/brigade-requests	GET	Отримання запитів на постачання бригади
Brigade Commander	/api/brig-com/update/brigade-resources	PUT	Оновити ресурси бригади
Scanning Device	/api/device/scan-car	POST	Сканування автівки
Battalion
Commander	/api/bat-com/send/resources-to-company	POST	Відправка ресурсів роті
Brigade Commander	/api/brig-com/ask/for-resources	POST	Запит на постачання ресурсів


6 РОЗРОБКА РОЗУМНОГО ПРИСТРОЮ
6.1 Архітектура система та бізнес логіка


Розумний пристрій реалізовано як консольний застосунок, з використанням мови Java, через її портативність завдяки концепції Write Once, Run Anywhere, високу продуктивність та масштабованість, бібліотек Jackson та JSON.org та пакету «java.net» для відправки запитів на сервер. Також розроблений консольний застосунок для налаштування ІоТ девайсу через підключення до локальної мережі та відправки інформації на підключені порти.[7]
Програмне забезпечення для IoT девайсу представляє собою трьох шарову архітектуру для девайса сканування, яка включає в себе такі шари як: ui, що надає можливість користувачу взаємодіяти з системою та надавати дані, у вигляді консольного застосунку, шар бізнес логіки для обробки відповідей, що надходять від серверу або формулювання інформацію для відправки на сервер, виконання читання даних про девайс та запис їх  у конфігураційний файл, та шаром для відправки запитів для з’єднання з API  для автентифікації та відправки даних.
Шар з’єднання з АРІ реалізує функціонал звертання до API, а саме відправки запитів  на запис про сканування машини постачання, автентифікацію та отримання даних про машину постачання. В даному шарі використовуються пакет «java.net», для створення і керування HTTP-з'єднаннями. Він дозволяє здійснювати HTTP-запити (наприклад, GET, POST, PUT, DELETE) до веб-серверів і отримувати відповіді від них.
Шар UI містить реалізації команд, які можуть бути зв’язані з елементами керування пристрою (в даній реалізації для спрощення тестування використовувався консольний додаток). Шар містить такі команди як: активація пристрою, автентифікація, сканування ID автомобіля постачання, відправка даних сканування на сервер, завершення роботи, конфігурування з’єднання з API, конфігурування параметрів пристрою. Також в цьому шарі знаходиться файл запуску, який містить реєстрацію сервісів в контейнер.
Шар бізнес логіки містить функціонал команд, який обробляє відповіді, що надходять від серверу або формує інформацію для відправки на сервер, виконує читання даних про девайс та запис їх  у конфігураційний файл формату .json. В ньому використовується наступні бібліотеки як Jackson, яка використовується для перетворення між Java об'єктами та JSON, та JSON.org для конфігурації JSON об’єктів. Головну логіку можна подивитися на діаграмі прецедентів  (див. Додаток  Б).
Основна функціональність включає в себе реалізацію наступних функцій:
-	Налаштування ІоТ пристрою адміністратором по локальній мережі, з використанням консольного застосунку для цього.
-	Автентифікація ІоТ пристрої у системі з використанням JWT токенів.
-	Сканування машини постачання для отримання її Id.
-	Надсилання запиту на сервер, для запису інформації про сканування машини постачання.
-	Отримання та вивід інформації про машину постачання в залежності від рівня секретності вантажу та доступу ІоТ пристрою.
Також було сформовано діаграму діяльності та (див. Додаток Б), що показує можливі варіанти взаємодії з приладом, та діаграму пакетів (див. Додаток Б).


6.2 Специфікація запитів


ІоТ пристрій взаємодіє з серверною частиною використовуючи REST-API, створюючи перед цим HTTP запити за допомогою пакету «java.net», та отримує і обробляє відповіді з сервера.
Специфікація кожного ендпоінту наведена у таблиці 3.


Таблиця 3 – Специфікація REST API для ІоТ пристрою.
Рівень доступу	Ендпоінт	HTTP метод	Призначення
Everybody	/api/auth/authenticate	POST	Автентифікація
Scanning Device	/api/device/scan-car	POST	Сканування автівки


7 РОЗРОБКА КЛІЄНТСЬКОЇ СИСТЕМИ
7.1 Архітектура системи


    Основним фреймворком для розробки веб-клієнту було обрано Angular, оскільки він пропонує швидке налаштування, що значно прискорює процес створення веб-додатків з високими характеристиками та надійністю. Для зв'язку з бекендом використовується REST API, який дає змогу надсилати запити до сервера з метою отримання та обробки даних. HttpClient використовується для виконання цих HTTP-запитів, роблячи роботу з API простою та ефективною.
Інтерфейс додатку підтримує багатомовність завдяки механізму i18n. Це дозволяє легко додавати нові мови та адаптувати інтерфейс для різних регіонів, забезпечуючи користувачам можливість взаємодіяти з додатком їх рідною мовою. Усі дані в проєкті кодуються з використанням UTF-8, що гарантує коректну обробку різноманітних символів та забезпечує сумісність з різними мовами та алфавітами. Використання ISO 8601 гарантує сумісність програмного забезпечення з іншими системами та платформами, що полегшує його інтеграцію та масштабування.
Для створення дизайну використовується  SCSS та Angular Material, що гарантують створення сучасних, привабливих інтерфейсів з високою зручністю користування, що робить роботу з додатком приємною на будь-якому девайсі.
	Для надання безпеки використовуються JWT токени під час авторизації та автентифікації, що зберігаються у локальному сховищі браузера та додаються до заголовків HTTP-запитів, надаючи користувачам доступ до захищених даних та ресурсів.
Веб-клієнт має компонентну архітектуру, яка є основною концепцією в Angular, бо вона дозволяє розділити додаток на незалежні, багаторазово використовувані частини. Це полегшує розробку, тестування та підтримку додатку.
Компоненти у додатку є основними будівельними блоками Angular додатків. Вони відповідають за відображення користувацького інтерфейсу та логіку взаємодії з ним. Які містять CSS або SCSS файли, які визначають стиль компоненту, HTML код, який визначає вигляд компоненту та TypeScript клас, який містить дані та методи для компонента.
Моделі містять всі структури даних, які використовуються в додатку.
Модулі організовують компоненти в логічні блоки. Кожен Angular додаток має принаймні один модуль — кореневий модуль (AppModule).
Сервіси в свою чергу використовуються для взаємодії з бекендом та  виконання бізнес логіки. Вони допомагають тримати компоненти чистими і зосередженими на відображенні UI.
Для навігації між різними сторінками веб-клієнту використовується Angular Router, що забезпечує зручну навігацію по додатку, використовуючи маршрути, які описуються у файлі маршрутизації. Ці маршрути чітко окреслюють, які компоненти повинні завантажуватися для кожної URL-адреси.
Завдяки поєднанню Angular, HttpClient, i18n та Angular Material, фронт-енд системи вирізняється високою якістю, простотою розширення та зручністю обслуговування. A використання JWT токенів для авторизації гарантує надійний захист даних та доступ до системи.


7.2 Бізнес логіка


Головним функціоналом програмної системи контролю логістичного забезпечення війська є електронна звітність та можливості слідкування за розподілом ресурсів між бойовими групами, запитами на постачання підтвердження виконання поставок, контроль кількості ресурсів, що залишилися для виконання завдань, слідкування за проходженнями машин постачання та перегляд чіткої звітності хто запросив їх та хто надав. На діаграмі прецедентів відображено основну логіку, функціональність серверного застосунку та взаємодію користувачів з ним (див. Додаток В).
Функції, що реалізовані у веб-клієнті:
-	Авторизація з використанням JWT токенів, що надає захист ресурсів та контроль доступу до них, яка захищає ресурси та контролює доступ до них за допомогою токенів, що надаю безпеку та контроль даних.
-	Можливість адмінів створювати блок пости та встановлювати на них розумні пристрої, які будуть сканувати машини постачання.
-	Можливість командирів бригади, батальйону та роти,  створювати бойові підрозділи та надавати їм ресурси для виконання бойових задач.
-	Можливість командирів бригади, батальйону та роти, оновлювати стан ресурсів бойових груп.
-	Можливість командирів бригади, батальйону та роти надавати ресурси дочірнім бойовим групам за їх запитом.
-	Можливість командирів бригади, батальйону та роти переглядати стан ресурсів власної бойової групи.
-	Можливість командирів бригади, батальйону та роти назначати командирів їх дочірніх бойових груп.
-	Можливість командирів бригади, батальйону та роти переглядати запити на постачання їх дочірніх бойових груп.
-	Можливість командирів логістичних рот приймати задачі на постачання ресурсів у бригаду.
-	Можливість командирів логістичних рот підтвердження доставки ресурсів.
-	Можливість командирів логістичних рот створення машин постачання для перевезення ресурсів.
-	Отримання командирами бригади, батальйону та роти повідомлень про потребу у ресурсах після оновлень даних про них.
У ході реалізації веб-клієнту дотримувалися правила чистого коду:
-	Іменування: Було використано інформативні назви компонентів, сервісів та моделей, що покращують розуміння коду та його логіки, і робить його більш надійним та стійким до помилок.
-	Структура: Структура проєкту чітко організована, з логічним розподілом файлів та директорій. Компоненти, моделі та сервіси розміщені у відповідних пакетах, що сприяє чіткості та простоті навігації.
-	Абстракція та інкапсуляція: Взаємодія з сервером інкапсульована у сервіси, абстрагуючи цю складну логіку від компонентів, що робить їх більш читабельними та зручними для розуміння.
-	Локалізація: Система підтримує локалізацію інтерфейсу завдяки  i18n з JSON-файлам для різних мов, що забезпечує зручну та швидку локалізацію інтерфейсу. Це робить додавання нових мов простим завданням.
-	Було дотримано принцип Single Responsibility, і усі компоненти мають чітко визначену відповідальність, що робить код організованим, надійним та легко підтримуваним.


7.3 Специфікація запитів


REST API в даному проєкті складається із 37 кінцевих точок. Кожний ендпоінт відповідає за надання даних клієнту та виконання бізнес логіки. Специфікація кожного ендпоінту наведена у виді таблиці (див. таб. 4)

Таблиця 4 – Специфікація REST API для веб-клієнту
Рівень доступу	Ендпоінт	HTTP метод	Призначення
Everybody	/api/auth/register	POST	Реєстрація користувача
Everybody	/api/auth/authenticate	POST	Автентифікація користувача
Logistic Commander	/api/log-com/confirm/delivery-of-supply-request/{id}	PUT	Підтвердження доставки ресурсів
Logistic Commander	/api/log-com/create/supply-car	POST	Створення машини постачання
Logistic Commander	/api/log-com/get/all-requests	GET	Перегляд усіх запитів на постачання
Logistic Commander	/api/log-com/get/car-checks/{id}	GET	Перегляд сканувань машини постачання
Продовження таблиці 4
Logistic Commander	/api/log-com/take/execution-of-supply-request/{id}	POST	Прийняття виконання поставки
Battalion
Commander	/api/bat-com/ask/for-resources	POST	Створення запиту на постачання
Battalion
Commander	/api/bat-com/assign/company-commander	PUT	Призначення командира роти
Battalion
Commander	/api/bat-com/battalion-company-groups	GET	Отримання рот батальйону
Battalion
Commander	/api/bat-com/confirm/getting-of-resources	PUT	Підтвердження отримання ресурсів
Battalion
Commander	/api/bat-com/create/company	POST	Створення роти
Battalion
Commander	/api/bat-com/get-battalion-resources	GET	Отримання стану ресурсів батальйону
Battalion
Commander	/api/bat-com/get/battalion-requests	GET	Перегляд запитів батальйону
Battalion
Commander	/api/bat-com/get/company-requests	GET	Отримання ресурсів роти
Battalion
Commander	/api/bat-com/update/battalion-resources	PUT	Оновлення ресурсів батальйону


Продовження таблиці 4
Brigade Commander	/api/brig-com/get/brigade-requests	GET	Отримання запитів на постачання бригади
Brigade Commander	/api/brig-com/update/brigade-resources	PUT	Оновити ресурси бригади
Company Commander	/api/com-com/assign/plat-commander	PUT	Призначення командира взводу
Company Commander	/api/com-com/company-plat-groups	GET	Отримання взводів роти
Company Commander	/api/com-com/confirm/getting-of-resources	PUT	Підтвердження отримання ресурсів ротою
Company Commander	/api/com-com/create/plat	POST	Створення взводу
Company Commander	/api/com-com/get-company-resources	GET	Отримання ресурсів роти
Company Commander	/api/com-com/get/company-requests	GET	Отримання запитів власної роти
Brigade Commander	/api/brig-com/assign/battalion-commander	PUT	Призначення командира батальйону


Продовження таблиці 4
Brigade Commander	/api/brig-com/brigade-battalion-groups	GET	Перегляд батальйоній бригади
Brigade Commander	/api/brig-com/assign/logistic-commander	PUT	Призначення логістичного командира
Brigade Commander	/api/brig-com/brigade-battalion-groups	GET	Перегляд батальйоній бригади
Brigade Commander	/api/brig-com/confirm/getting-of-resources	PUT	Підтвердження отримання ресурсів
Brigade Commander	/api/brig-com/create/battalion	POST	Створення батальйону
Brigade Commander	/api/brig-com/create/brigade	POST	Створення бригади
Brigade Commander	/api/brig-com/create/logistic-company	POST	Створення логістичної роти
Brigade Commander	/api/brig-com/get-brigade-resources	GET	Отримання ресурсів бригади


Продовження таблиці 4
Brigade Commander	/api/brig-com/get/battalion-requests	GET	Отримання запитів на постачання батальйону
Brigade Commander	/api/brig-com/send/resources-to-battalion	POST	Відправити ресурси до батальйону


ВИСНОВКИ


У ході виконання курсової роботи було створено програмну систему для контролю логістичного забезпечення війська. Був проведений аналіз проблем, які потребують вирішення та аналіз існуючих аналогів, на основі чого був сформований функціонал програмної системи, архітектура та вимоги до неї.
Розроблена програмна система розділяється на чотири складові: серверний застосунок, веб-клієнт, ІоТ пристрій та мобільний застосунок, задля забезпечення вирішення задач контролю логістичного забезпечення війська. Серверна частина системи ефективно обробляє дані та управляє ресурсами бойових груп, забезпечуючи їх моніторинг та розподіл. Веб-застосунок у свою чергу надає привабливий інтерфейс з високою зручністю користування, що робить роботу з додатком приємною на будь-якому девайсі. IoT пристрій дає можливість перевірки машин постачання без участі людини, що призводить до зменшення можливості розповсюдження інформації про вантаж машин постачання, та дає чітку звітність про те, де машина перевірялася, що дає можливість у разі втрати певного вантажу швидко знаходити місця де це відбулося та хто винен. Мобільний застосунок надає користувачам доступ до програмної системи, якщо не має можливості користуватися великими за розмірами пристроями, а також зменшує кількість часу на створення запитів на постачання ресурсів.
Програмна система для контролю логістичного забезпечення війська покращує контроль логістичного забезпечення, звітності про ресурси та можливості електронного зберігання їх розподілення і поставок між бойовими групами, надає можливість точного обліку витрачених і отриманих ресурсів, що підвищує прозорість і зменшує ризики розкрадання. А також забезпечує швидкий і надійний обмін даними між бойовими підрозділами, що підвищує ефективність їхньої взаємодії. Чим вирішує важливі потреби у логістиці ЗСУ. Також з урахування оборонної реформи, ситуації у якій знаходиться Україна та загалом світової політики, система має значний потенціал для розширення та вдосконалення за рахунок інтеграції додаткових модулів, які сприятимуть оптимізації логістичних процесів та посиленню контролю над ними. Програмна система теж має потенціал бути реалізованою для цивільної логістики.
Отримані результати підтверджують перспективність розробленої програмної системи для контролю логістичного забезпечення війська. Ця система володіє значним потенціалом для подальшого розвитку та впровадження в реальних умовах, що може суттєво покращити логістичну галузь.
Посилання на GitHub: https://github.com/NureIvakinNikita/apzkr-pzpi-21-5-ivakin-nikita
Посилання на відео в YouTube:


ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ


1.	Spring Boot Documentation [Електронний ресурс] – Режим доступу до ресурсу: https://docs.spring.io/spring-boot/documentation.html (дата звернення  01.05.2024).
2.	Склад Збройних Сил України [Електронний ресурс] – Режим доступу до ресурсу: https://www.mil.gov.ua/ministry/sklad-zbrojnix-sil-ukraini/  (дата звернення 25.03.2024).
3.	Проблема створення інформаційної системи логістики в збройних силах України, що відповідає стандартам НАТО [Електронний ресурс] – Режим доступу до ресурсу: http://dspace.nbuv.gov.ua/handle/123456789/150912 (дата звернення 03.04.2024).
4.	Планування логістичних процесів у повсякденній діяльності військових підрозділів Національної гвардії України – Режим доступу до ресурсу: http://pev.kpu.zp.ua/journals/2021/1_24_ukr/24.pdf (дата звернення 23.03.2024).
5.	Angular Documentation [Електронний ресурс] – Режим доступу до ресурсу: https://v17.angular.io/docs (дата звернення 06.06.2024).
6.	Порядок логістичного забезпечення сил оборони під час виконання завдань з оборони держави, захисту її суверенітету, територіальної цілісності та недоторканності [Електронний ресурс] – Режим доступу до ресурсу: https://zakon.rada.gov.ua/laws/show/1208-2018-%D0%BF#Text (дата звернення 20.05.2024).
7.	Oracle Help Center, Broadcasting to Multiple Recipients [Електронний ресурс] – Режим доступу до ресурсу: https://docs.oracle.com/javase/tutorial/networking/datagrams/broadcasting.html (дата звернення 10.05.2024)


ДОДАТОК А Діаграми для серверної частини
Діаграма пакетів
Рисунок 2 – діаграма пакетів

Діаграма розгортання
Рисунок 3 – Діаграма розгортання

ER-діаграма
Рисунок 4 – ER-діаграма

Діаграма прецедентів
Рисунок 5 – Діаграма прецедентів


ДОДАТОК Б Діаграми для розумного пристрою
Діаграма прецедентів
Рисунок 6 – Діаграма прецедентів

Діаграма пакетів
Рисунок 7 – Діаграма пакетів

Діаграма діяльності
Рисунок 8 – Діаграма діяльності


ДОДАТОК В Діаграми для веб-клієнту
Діаграма прецедентів
Рисунок 9 – Діаграма прецедентів

Діаграма пакетів
Рисунок 10 – Діаграма пакетів

Діаграма діяльності
Рисунок 11 – Діаграма діяльності

Діаграма компонентів
Рисунок 12 – Діаграма компонентів